import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext, colorchooser
import qrcode
from PIL import Image, ImageTk, ImageDraw
import os
import json
from datetime import datetime
import re
import urllib.parse
import io
import base64

# –î–ª—è SVG –µ–∫—Å–ø–æ—Ä—Ç—É
try:
    import svgwrite
    SVG_AVAILABLE = True
except ImportError:
    SVG_AVAILABLE = False

class QRCodeGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("QR Code Generator Pro v2.0")
        self.root.geometry("1100x900")
        self.root.resizable(True, True)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_file = "qr_settings.json"
        self.load_settings()
        
        # QR –∫–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.current_qr_image = None
        self.qr_photo = None
        self.current_qr_type = "text"
        self.preview_qr = None
        
        # –¢–∏–ø–∏ QR-–∫–æ–¥—ñ–≤ —Ç–∞ —ó—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏
        self.qr_types = {
            "text": {
                "name": "üìù –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç",
                "generator": self.generate_text_qr,
                "validator": self.validate_text
            },
            "url": {
                "name": "üåê –í–µ–±-—Å–∞–π—Ç (URL)",
                "generator": self.generate_url_qr,
                "validator": self.validate_url
            },
            "email": {
                "name": "üìß Email",
                "generator": self.generate_email_qr,
                "validator": self.validate_email
            },
            "phone": {
                "name": "üìû –¢–µ–ª–µ—Ñ–æ–Ω",
                "generator": self.generate_phone_qr,
                "validator": self.validate_phone
            },
            "sms": {
                "name": "üí¨ SMS",
                "generator": self.generate_sms_qr,
                "validator": self.validate_sms
            },
            "wifi": {
                "name": "üì∂ WiFi",
                "generator": self.generate_wifi_qr,
                "validator": self.validate_wifi
            },
            "vcard": {
                "name": "üë§ –í—ñ–∑–∏—Ç–∫–∞ (vCard)",
                "generator": self.generate_vcard_qr,
                "validator": self.validate_vcard
            }
        }
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
        self.color_presets = {
            "–ö–ª–∞—Å–∏—á–Ω–∏–π": {"fg": "#000000", "bg": "#FFFFFF"},
            "–°–∏–Ω—ñ–π": {"fg": "#1E3A8A", "bg": "#FFFFFF"},
            "–ó–µ–ª–µ–Ω–∏–π": {"fg": "#166534", "bg": "#FFFFFF"},
            "–ß–µ—Ä–≤–æ–Ω–∏–π": {"fg": "#991B1B", "bg": "#FFFFFF"},
            "–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π": {"fg": "#7C3AED", "bg": "#FFFFFF"},
            "–¢–µ–º–Ω–∞ —Ç–µ–º–∞": {"fg": "#FFFFFF", "bg": "#1F2937"},
            "–ì—Ä–∞–¥–∞—Ü—ñ—è —Å–∏–Ω—å–æ–≥–æ": {"fg": "#1E40AF", "bg": "#DBEAFE"},
            "–ó–µ–ª–µ–Ω–∞ –≥—Ä–∞–¥–∞—Ü—ñ—è": {"fg": "#059669", "bg": "#D1FAE5"}
        }
        
        # –°—Ç–∏–ª–∏ –º–æ–¥—É–ª—ñ–≤ QR-–∫–æ–¥—É
        self.module_styles = {
            "square": "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ñ",
            "circle": "–ö—Ä—É–≥–ª—ñ", 
            "rounded": "–ó–∞–∫—Ä—É–≥–ª–µ–Ω—ñ"
        }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_settings = {
            "save_folder": os.path.expanduser("~/Desktop/QR_Codes"),
            "error_correction": "M",
            "border": 4,
            "box_size": 10,
            "last_qr_type": "text",
            "fg_color": "#000000",
            "bg_color": "#FFFFFF",
            "module_style": "square",
            "export_format": "PNG",
            "high_quality": True,
            "transparent_bg": False
        }
        
        try:
            if os.path.exists(self.settings_file):
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    self.settings = json.load(f)
                for key, value in default_settings.items():
                    if key not in self.settings:
                        self.settings[key] = value
            else:
                self.settings = default_settings
        except:
            self.settings = default_settings
            
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            self.settings["last_qr_type"] = self.current_qr_type
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {str(e)}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å Notebook
        main_notebook = ttk.Notebook(self.root, padding="5")
        main_notebook.pack(fill='both', expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ "–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞"
        create_frame = ttk.Frame(main_notebook, padding="10")
        main_notebook.add(create_frame, text="–°—Ç–≤–æ—Ä–µ–Ω–Ω—è QR-–∫–æ–¥—É")
        
        # –í–∫–ª–∞–¥–∫–∞ "–î–∏–∑–∞–π–Ω"
        design_frame = ttk.Frame(main_notebook, padding="10")
        main_notebook.add(design_frame, text="–î–∏–∑–∞–π–Ω")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        create_frame.columnconfigure(1, weight=1)
        design_frame.columnconfigure(1, weight=1)
        
        # === –í–ö–õ–ê–î–ö–ê –°–û–ó–î–ê–ù–ò–Ø ===
        self.create_main_tab(create_frame)
        
        # === –í–ö–õ–ê–î–ö–ê –î–ò–ó–ê–ô–ù–ê ===
        self.create_design_tab(design_frame)
        
    def create_main_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ QR-–∫–æ–¥–∞
        ttk.Label(parent, text="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø QR-–∫–æ–¥—É:").grid(row=0, column=0, columnspan=2, sticky=tk.W, pady=(0, 5))
        
        self.qr_type_var = tk.StringVar(value=self.settings.get("last_qr_type", "text"))
        self.current_qr_type = self.qr_type_var.get()
        
        type_frame = ttk.Frame(parent)
        type_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.type_combo = ttk.Combobox(type_frame, textvariable=self.qr_type_var, state="readonly", width=30)
        self.type_combo['values'] = [self.qr_types[key]["name"] for key in self.qr_types.keys()]
        self.type_combo.grid(row=0, column=0, sticky=(tk.W, tk.E))
        self.type_combo.bind('<<ComboboxSelected>>', self.on_type_change)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        current_type_name = self.qr_types[self.current_qr_type]["name"]
        self.type_combo.set(current_type_name)
        
        type_frame.columnconfigure(0, weight=1)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        self.input_container = ttk.LabelFrame(parent, text="–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ:", padding="10")
        self.input_container.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞
        self.create_input_fields()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(parent)
        buttons_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        buttons_frame.columnconfigure(0, weight=1)
        buttons_frame.columnconfigure(1, weight=1)
        buttons_frame.columnconfigure(2, weight=1)
        
        self.generate_btn = ttk.Button(buttons_frame, text="–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥", command=self.generate_qr)
        self.generate_btn.grid(row=0, column=0, padx=(0, 5), sticky=(tk.W, tk.E))
        
        self.save_btn = ttk.Button(buttons_frame, text="–ó–±–µ—Ä–µ–≥—Ç–∏ QR-–∫–æ–¥", command=self.save_qr, state='disabled')
        self.save_btn.grid(row=0, column=1, padx=5, sticky=(tk.W, tk.E))
        
        self.settings_btn = ttk.Button(buttons_frame, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", command=self.open_settings)
        self.settings_btn.grid(row=0, column=2, padx=(5, 0), sticky=(tk.W, tk.E))
        
        # –§—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞
        qr_frame = ttk.LabelFrame(parent, text="–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π QR-–∫–æ–¥", padding="10")
        qr_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        parent.rowconfigure(4, weight=1)
        
        self.qr_label = ttk.Label(qr_frame, text="QR-–∫–æ–¥ –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó", 
                                 relief='sunken', anchor='center')
        self.qr_label.pack(expand=True, fill='both')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ
        self.info_frame = ttk.LabelFrame(parent, text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", padding="5")
        self.info_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.info_label = ttk.Label(self.info_frame, text="", wraplength=600, justify='left')
        self.info_label.pack(fill='x')
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar()
        self.status_var.set(f"–ü–∞–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {self.settings['save_folder']}")
        status_bar = ttk.Label(parent, textvariable=self.status_var, relief='sunken')
        status_bar.grid(row=6, column=0, columnspan=2, sticky=(tk.W, tk.E))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–∏–ø–µ
        self.update_type_info()
        
    def create_design_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–∏–∑–∞–π–Ω–∞"""
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        left_frame = ttk.Frame(parent)
        left_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–µ–≤—å—é
        right_frame = ttk.LabelFrame(parent, text="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥", padding="10")
        right_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        parent.columnconfigure(1, weight=1)
        parent.rowconfigure(0, weight=1)
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò –¶–í–ï–¢–û–í ===
        colors_frame = ttk.LabelFrame(left_frame, text="–ö–æ–ª—å–æ—Ä–∏", padding="10")
        colors_frame.pack(fill='x', pady=(0, 10))
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
        ttk.Label(colors_frame, text="–ì–æ—Ç–æ–≤—ñ —Å—Ö–µ–º–∏:").pack(anchor='w', pady=(0, 5))
        
        self.color_preset_var = tk.StringVar(value="–ö–ª–∞—Å–∏—á–Ω–∏–π")
        preset_combo = ttk.Combobox(colors_frame, textvariable=self.color_preset_var, 
                                   values=list(self.color_presets.keys()), state="readonly")
        preset_combo.pack(fill='x', pady=(0, 10))
        preset_combo.bind('<<ComboboxSelected>>', self.on_preset_change)
        
        # –¶–≤–µ—Ç –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞
        fg_frame = ttk.Frame(colors_frame)
        fg_frame.pack(fill='x', pady=(0, 5))
        
        ttk.Label(fg_frame, text="–ö–æ–ª—ñ—Ä QR-–∫–æ–¥—É:").pack(side='left')
        self.fg_color_var = tk.StringVar(value=self.settings.get('fg_color', '#000000'))
        self.fg_color_btn = tk.Button(fg_frame, text="   ", bg=self.fg_color_var.get(), 
                                     width=3, command=self.choose_fg_color)
        self.fg_color_btn.pack(side='right')
        
        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞
        bg_frame = ttk.Frame(colors_frame)
        bg_frame.pack(fill='x', pady=(0, 5))
        
        ttk.Label(bg_frame, text="–ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É:").pack(side='left')
        self.bg_color_var = tk.StringVar(value=self.settings.get('bg_color', '#FFFFFF'))
        self.bg_color_btn = tk.Button(bg_frame, text="   ", bg=self.bg_color_var.get(), 
                                     width=3, command=self.choose_bg_color)
        self.bg_color_btn.pack(side='right')
        
        # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        self.transparent_var = tk.BooleanVar(value=self.settings.get('transparent_bg', False))
        ttk.Checkbutton(colors_frame, text="–ü—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω (PNG)", 
                       variable=self.transparent_var, command=self.update_preview).pack(anchor='w')
        
        # === –°–¢–ò–õ–¨ –ú–û–î–£–õ–ï–ô ===
        style_frame = ttk.LabelFrame(left_frame, text="–°—Ç–∏–ª—å –º–æ–¥—É–ª—ñ–≤", padding="10")
        style_frame.pack(fill='x', pady=(0, 10))
        
        self.module_style_var = tk.StringVar(value=self.settings.get('module_style', 'square'))
        
        for style_key, style_name in self.module_styles.items():
            ttk.Radiobutton(style_frame, text=style_name, variable=self.module_style_var, 
                           value=style_key, command=self.update_preview).pack(anchor='w')
        
        # === –§–û–†–ú–ê–¢ –ï–ö–°–ü–û–†–¢–£ ===
        export_frame = ttk.LabelFrame(left_frame, text="–§–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É", padding="10")
        export_frame.pack(fill='x', pady=(0, 10))
        
        self.export_format_var = tk.StringVar(value=self.settings.get('export_format', 'PNG'))
        
        formats = ['PNG', 'JPG', 'SVG']
        if not SVG_AVAILABLE:
            formats.remove('SVG')
            
        for fmt in formats:
            ttk.Radiobutton(export_frame, text=fmt, variable=self.export_format_var, 
                           value=fmt, command=self.update_export_options).pack(anchor='w')
        
        # –û–ø—Ü—ñ—ó —è–∫–æ—Å—Ç—ñ
        quality_frame = ttk.Frame(export_frame)
        quality_frame.pack(fill='x', pady=(10, 0))
        
        self.high_quality_var = tk.BooleanVar(value=self.settings.get('high_quality', True))
        ttk.Checkbutton(quality_frame, text="–í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å (800x800)", 
                       variable=self.high_quality_var).pack(anchor='w')
        
        # === –ö–ù–û–ü–ö–ò –î–ò–ó–ê–ô–ù–ê ===
        design_buttons_frame = ttk.Frame(left_frame)
        design_buttons_frame.pack(fill='x', pady=(10, 0))
        
        ttk.Button(design_buttons_frame, text="–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ–≤—å—é", 
                  command=self.update_preview).pack(fill='x', pady=(0, 5))
        ttk.Button(design_buttons_frame, text="–°–∫–∏–Ω—É—Ç–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö", 
                  command=self.reset_design).pack(fill='x')
        
        # === –ü–†–ï–í–¨–Æ ===
        self.preview_label = ttk.Label(right_frame, text="–ü—Ä–µ–≤—å—é –∑'—è–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó QR-–∫–æ–¥—É", 
                                      relief='sunken', anchor='center')
        self.preview_label.pack(expand=True, fill='both')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–≤—å—é
        preview_info = ttk.Frame(right_frame)
        preview_info.pack(fill='x', pady=(10, 0))
        
        self.preview_info_label = ttk.Label(preview_info, text="", justify='center')
        self.preview_info_label.pack()
        
    def on_preset_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã"""
        preset_name = self.color_preset_var.get()
        if preset_name in self.color_presets:
            colors = self.color_presets[preset_name]
            
            self.fg_color_var.set(colors['fg'])
            self.bg_color_var.set(colors['bg'])
            
            self.fg_color_btn.config(bg=colors['fg'])
            self.bg_color_btn.config(bg=colors['bg'])
            
            self.update_preview()
    
    def choose_fg_color(self):
        """–í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞"""
        color = colorchooser.askcolor(initialcolor=self.fg_color_var.get())
        if color[1]:
            self.fg_color_var.set(color[1])
            self.fg_color_btn.config(bg=color[1])
            self.color_preset_var.set("–í–ª–∞—Å–Ω–∏–π")
            self.update_preview()
    
    def choose_bg_color(self):
        """–í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞"""
        color = colorchooser.askcolor(initialcolor=self.bg_color_var.get())
        if color[1]:
            self.bg_color_var.set(color[1])
            self.bg_color_btn.config(bg=color[1])
            self.color_preset_var.set("–í–ª–∞—Å–Ω–∏–π")
            self.update_preview()
    
    def update_export_options(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        fmt = self.export_format_var.get()
        if fmt == 'SVG':
            self.high_quality_var.set(False)  # SVG –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    
    def reset_design(self):
        """–°–±—Ä–æ—Å –¥–∏–∑–∞–π–Ω–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        self.fg_color_var.set("#000000")
        self.bg_color_var.set("#FFFFFF")
        self.fg_color_btn.config(bg="#000000")
        self.bg_color_btn.config(bg="#FFFFFF")
        self.module_style_var.set("square")
        self.export_format_var.set("PNG")
        self.transparent_var.set(False)
        self.high_quality_var.set(True)
        self.color_preset_var.set("–ö–ª–∞—Å–∏—á–Ω–∏–π")
        self.update_preview()
    
    def update_preview(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é QR-–∫–æ–¥–∞"""
        if not self.current_qr_image:
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–∏–∑–∞–π–Ω–∞
            preview_image = self.create_styled_qr_image(self.current_qr_image, preview=True)
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é
            display_size = (250, 250)
            preview_display = preview_image.resize(display_size, Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è tkinter
            self.preview_qr = ImageTk.PhotoImage(preview_display)
            self.preview_label.configure(image=self.preview_qr, text="")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            style_name = self.module_styles[self.module_style_var.get()]
            colors_info = f"–ö–æ–ª—å–æ—Ä–∏: {self.fg_color_var.get()} / {self.bg_color_var.get()}"
            format_info = f"–§–æ—Ä–º–∞—Ç: {self.export_format_var.get()}"
            self.preview_info_label.config(text=f"{style_name}\n{colors_info}\n{format_info}")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é: {e}")
    
    def create_styled_qr_image(self, base_qr_image, preview=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞
        fg_color = self.fg_color_var.get()
        bg_color = self.bg_color_var.get() if not self.transparent_var.get() else None
        
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
        # –í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é
        styled_image = base_qr_image.copy()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞
        if fg_color != "#000000" or bg_color != "#FFFFFF":
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏
            styled_image = styled_image.convert("RGBA")
            data = styled_image.getdata()
            
            new_data = []
            for item in data:
                # –ó–∞–º–µ–Ω—è–µ–º —á–µ—Ä–Ω—ã–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞
                if item[:3] == (0, 0, 0):  # —á–µ—Ä–Ω—ã–π –ø–∏–∫—Å–µ–ª—å
                    rgb = tuple(int(fg_color[i:i+2], 16) for i in (1, 3, 5))
                    new_data.append(rgb + (255,))
                # –ó–∞–º–µ–Ω—è–µ–º –±–µ–ª—ã–π –Ω–∞ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∏–ª–∏ –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
                elif item[:3] == (255, 255, 255):  # –±–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å
                    if self.transparent_var.get():
                        new_data.append((255, 255, 255, 0))  # –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                    else:
                        rgb = tuple(int(bg_color[i:i+2], 16) for i in (1, 3, 5))
                        new_data.append(rgb + (255,))
                else:
                    new_data.append(item)
            
            styled_image.putdata(new_data)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB –µ—Å–ª–∏ —Ñ–æ–Ω –Ω–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            if not self.transparent_var.get():
                styled_image = styled_image.convert("RGB")
        
        return styled_image
    
    def on_type_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ QR-–∫–æ–¥–∞"""
        selected_name = self.qr_type_var.get()
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –ø–æ –∏–º–µ–Ω–∏
        for key, value in self.qr_types.items():
            if value["name"] == selected_name:
                self.current_qr_type = key
                break
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.create_input_fields()
        self.update_type_info()
        
        # –û—á–∏—â–∞–µ–º QR-–∫–æ–¥
        self.current_qr_image = None
        self.qr_photo = None
        self.preview_qr = None
        self.qr_label.configure(image='', text="QR-–∫–æ–¥ –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
        self.preview_label.configure(image='', text="–ü—Ä–µ–≤—å—é –∑'—è–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó QR-–∫–æ–¥—É")
        self.save_btn.configure(state='disabled')
    
    def create_input_fields(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ QR-–∫–æ–¥–∞"""
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        for widget in self.input_container.winfo_children():
            widget.destroy()
        
        self.input_widgets = {}
        
        if self.current_qr_type == "text":
            self.create_text_fields()
        elif self.current_qr_type == "url":
            self.create_url_fields()
        elif self.current_qr_type == "email":
            self.create_email_fields()
        elif self.current_qr_type == "phone":
            self.create_phone_fields()
        elif self.current_qr_type == "sms":
            self.create_sms_fields()
        elif self.current_qr_type == "wifi":
            self.create_wifi_fields()
        elif self.current_qr_type == "vcard":
            self.create_vcard_fields()
    
    def create_text_fields(self):
        """–ü–æ–ª—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        ttk.Label(self.input_container, text="–¢–µ–∫—Å—Ç:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['text'] = scrolledtext.ScrolledText(self.input_container, width=60, height=6, wrap=tk.WORD)
        self.input_widgets['text'].pack(fill='both', expand=True)
    
    def create_url_fields(self):
        """–ü–æ–ª—è –¥–ª—è URL"""
        ttk.Label(self.input_container, text="URL –≤–µ–±-—Å–∞–π—Ç—É:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['url'] = tk.Entry(self.input_container, width=60)
        self.input_widgets['url'].pack(fill='x', pady=(0, 5))
        self.input_widgets['url'].insert(0, "https://")
        
        ttk.Label(self.input_container, text="–ü—Ä–∏–∫–ª–∞–¥: https://www.google.com").pack(anchor='w')
    
    def create_email_fields(self):
        """–ü–æ–ª—è –¥–ª—è email"""
        ttk.Label(self.input_container, text="Email –∞–¥—Ä–µ—Å–∞:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['email'] = tk.Entry(self.input_container, width=60)
        self.input_widgets['email'].pack(fill='x', pady=(0, 10))
        
        ttk.Label(self.input_container, text="–¢–µ–º–∞ –ª–∏—Å—Ç–∞ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):").pack(anchor='w', pady=(0, 5))
        self.input_widgets['subject'] = tk.Entry(self.input_container, width=60)
        self.input_widgets['subject'].pack(fill='x', pady=(0, 10))
        
        ttk.Label(self.input_container, text="–¢–µ–∫—Å—Ç –ª–∏—Å—Ç–∞ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):").pack(anchor='w', pady=(0, 5))
        self.input_widgets['body'] = scrolledtext.ScrolledText(self.input_container, width=60, height=4, wrap=tk.WORD)
        self.input_widgets['body'].pack(fill='both', expand=True)
    
    def create_phone_fields(self):
        """–ü–æ–ª—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        ttk.Label(self.input_container, text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['phone'] = tk.Entry(self.input_container, width=60)
        self.input_widgets['phone'].pack(fill='x', pady=(0, 5))
        self.input_widgets['phone'].insert(0, "+380")
        
        ttk.Label(self.input_container, text="–ü—Ä–∏–∫–ª–∞–¥: +380123456789").pack(anchor='w')
    
    def create_sms_fields(self):
        """–ü–æ–ª—è –¥–ª—è SMS"""
        ttk.Label(self.input_container, text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['phone'] = tk.Entry(self.input_container, width=60)
        self.input_widgets['phone'].pack(fill='x', pady=(0, 10))
        self.input_widgets['phone'].insert(0, "+380")
        
        ttk.Label(self.input_container, text="–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['message'] = scrolledtext.ScrolledText(self.input_container, width=60, height=4, wrap=tk.WORD)
        self.input_widgets['message'].pack(fill='both', expand=True)
    
    def create_wifi_fields(self):
        """–ü–æ–ª—è –¥–ª—è WiFi"""
        ttk.Label(self.input_container, text="–ù–∞–∑–≤–∞ –º–µ—Ä–µ–∂—ñ (SSID):").pack(anchor='w', pady=(0, 5))
        self.input_widgets['ssid'] = tk.Entry(self.input_container, width=60)
        self.input_widgets['ssid'].pack(fill='x', pady=(0, 10))
        
        ttk.Label(self.input_container, text="–ü–∞—Ä–æ–ª—å:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['password'] = tk.Entry(self.input_container, width=60, show="*")
        self.input_widgets['password'].pack(fill='x', pady=(0, 10))
        
        ttk.Label(self.input_container, text="–¢–∏–ø —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['security'] = ttk.Combobox(self.input_container, values=['WPA', 'WEP', 'nopass'], state="readonly")
        self.input_widgets['security'].set('WPA')
        self.input_widgets['security'].pack(fill='x', pady=(0, 10))
        
        self.input_widgets['hidden'] = tk.BooleanVar()
        ttk.Checkbutton(self.input_container, text="–ü—Ä–∏—Ö–æ–≤–∞–Ω–∞ –º–µ—Ä–µ–∂–∞", variable=self.input_widgets['hidden']).pack(anchor='w')
    
    def create_vcard_fields(self):
        """–ü–æ–ª—è –¥–ª—è vCard"""
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        ttk.Label(self.input_container, text="–Ü–º'—è:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['first_name'] = tk.Entry(self.input_container, width=60)
        self.input_widgets['first_name'].pack(fill='x', pady=(0, 5))
        
        ttk.Label(self.input_container, text="–ü—Ä—ñ–∑–≤–∏—â–µ:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['last_name'] = tk.Entry(self.input_container, width=60)
        self.input_widgets['last_name'].pack(fill='x', pady=(0, 10))
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        contact_frame = ttk.LabelFrame(self.input_container, text="–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", padding="5")
        contact_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Label(contact_frame, text="–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['organization'] = tk.Entry(contact_frame, width=60)
        self.input_widgets['organization'].pack(fill='x', pady=(0, 5))
        
        ttk.Label(contact_frame, text="–ü–æ—Å–∞–¥–∞:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['title'] = tk.Entry(contact_frame, width=60)
        self.input_widgets['title'].pack(fill='x', pady=(0, 5))
        
        ttk.Label(contact_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['phone'] = tk.Entry(contact_frame, width=60)
        self.input_widgets['phone'].pack(fill='x', pady=(0, 5))
        
        ttk.Label(contact_frame, text="Email:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['email'] = tk.Entry(contact_frame, width=60)
        self.input_widgets['email'].pack(fill='x', pady=(0, 5))
        
        ttk.Label(contact_frame, text="–í–µ–±-—Å–∞–π—Ç:").pack(anchor='w', pady=(0, 5))
        self.input_widgets['website'] = tk.Entry(contact_frame, width=60)
        self.input_widgets['website'].pack(fill='x')
    
    def update_type_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ QR-–∫–æ–¥–∞"""
        info_texts = {
            "text": "–ó–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç - –Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏–π —Ç–∏–ø QR-–∫–æ–¥—É. –ú–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç –¥–æ 4296 —Å–∏–º–≤–æ–ª—ñ–≤.",
            "url": "URL QR-–∫–æ–¥ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –≤–µ–±-—Å–∞–π—Ç –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç–∏ http:// –∞–±–æ https://",
            "email": "Email QR-–∫–æ–¥ - —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –ª–∏—Å—Ç –∑ –≤–∫–∞–∑–∞–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é, —Ç–µ–º–æ—é —Ç–∞ —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ—à—Ç–æ–≤–æ–º—É –∫–ª—ñ—î–Ω—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
            "phone": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π QR-–∫–æ–¥ - –¥–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –Ω–æ–º–µ—Ä –æ–¥–Ω–∏–º –¥–æ—Ç–∏–∫–æ–º.",
            "sms": "SMS QR-–∫–æ–¥ - –≤—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ–¥–∞—Ç–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–∞ —Ç–µ–∫—Å—Ç–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
            "wifi": "WiFi QR-–∫–æ–¥ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–∫–ª—é—á–∞—î –ø—Ä–∏—Å—Ç—Ä—ñ–π –¥–æ WiFi –º–µ—Ä–µ–∂—ñ –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é.",
            "vcard": "vCard (–í—ñ–∑–∏—Ç–∫–∞) - –∑–±–µ—Ä—ñ–≥–∞—î –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É –∫–Ω–∏–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ."
        }
        
        self.info_label.config(text=info_texts.get(self.current_qr_type, ""))
    
    # –í–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏
    def validate_text(self, data):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
        text = data.get('text', '').strip()
        if not text:
            return False, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç"
        if len(text) > 4296:
            return False, "–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å–∏–º—É–º 4296 —Å–∏–º–≤–æ–ª—ñ–≤)"
        return True, text
    
    def validate_url(self, data):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è URL"""
        url = data.get('url', '').strip()
        if not url:
            return False, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å URL"
        
        if not url.startswith(('http://', 'https://', 'ftp://')):
            url = 'https://' + url
        
        # –°–ø—Ä–æ—â–µ–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è URL
        try:
            from urllib.parse import urlparse
            result = urlparse(url)
            if not all([result.scheme, result.netloc]):
                return False, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL"
        except:
            return False, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL"
        
        return True, url
    
    def validate_email(self, data):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è email"""
        email = data.get('email', '').strip()
        if not email:
            return False, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å email –∞–¥—Ä–µ—Å—É"
        
        email_pattern = re.compile(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})$')
        if not email_pattern.match(email):
            return False, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∏"
        
        return True, email
    
    def validate_phone(self, data):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        phone = data.get('phone', '').strip()
        if not phone:
            return False, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
        
        phone_clean = re.sub(r'[^\d+]', '', phone)
        
        if not phone_clean.startswith('+'):
            return False, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ +"
        
        if len(phone_clean) < 10 or len(phone_clean) > 15:
            return False, "–ù–µ–≤—ñ—Ä–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
        
        return True, phone_clean
    
    def validate_sms(self, data):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è SMS"""
        phone_valid, phone_result = self.validate_phone(data)
        if not phone_valid:
            return False, phone_result
        
        message = data.get('message', '').strip()
        if len(message) > 160:
            return False, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ (–º–∞–∫—Å–∏–º—É–º 160 —Å–∏–º–≤–æ–ª—ñ–≤)"
        
        return True, (phone_result, message)
    
    def validate_wifi(self, data):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è WiFi"""
        ssid = data.get('ssid', '').strip()
        if not ssid:
            return False, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–µ—Ä–µ–∂—ñ (SSID)"
        
        password = data.get('password', '').strip()
        security = data.get('security', 'WPA')
        
        if security != 'nopass' and not password:
            return False, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—Ö–∏—â–µ–Ω–æ—ó –º–µ—Ä–µ–∂—ñ"
        
        return True, (ssid, password, security)
    
    def validate_vcard(self, data):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è vCard"""
        first_name = data.get('first_name', '').strip()
        last_name = data.get('last_name', '').strip()
        
        if not first_name and not last_name:
            return False, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ö–æ—á–∞ –± —ñ–º'—è –∞–±–æ –ø—Ä—ñ–∑–≤–∏—â–µ"
        
        return True, data
    
    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
    def generate_text_qr(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
        return data.get('text', '').strip()
    
    def generate_url_qr(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR –¥–ª—è URL"""
        return data.get('url', '').strip()
    
    def generate_email_qr(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR –¥–ª—è email"""
        email = data.get('email', '').strip()
        subject = data.get('subject', '').strip()
        body = data.get('body', '').strip()
        
        mailto_url = f"mailto:{email}"
        params = []
        
        if subject:
            params.append(f"subject={urllib.parse.quote(subject)}")
        if body:
            params.append(f"body={urllib.parse.quote(body)}")
        
        if params:
            mailto_url += "?" + "&".join(params)
        
        return mailto_url
    
    def generate_phone_qr(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        phone = data.get('phone', '').strip()
        return f"tel:{phone}"
    
    def generate_sms_qr(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR –¥–ª—è SMS"""
        phone = data.get('phone', '').strip()
        message = data.get('message', '').strip()
        
        sms_url = f"sms:{phone}"
        if message:
            sms_url += f"?body={urllib.parse.quote(message)}"
        
        return sms_url
    
    def generate_wifi_qr(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR –¥–ª—è WiFi"""
        ssid = data.get('ssid', '').strip()
        password = data.get('password', '').strip()
        security = data.get('security', 'WPA')
        hidden = data.get('hidden', False)
        
        wifi_string = f"WIFI:T:{security};S:{ssid};P:{password};H:{'true' if hidden else 'false'};;"
        return wifi_string
    
    def generate_vcard_qr(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR –¥–ª—è vCard"""
        vcard_lines = ["BEGIN:VCARD", "VERSION:3.0"]
        
        # –Ü–º'—è
        first_name = data.get('first_name', '').strip()
        last_name = data.get('last_name', '').strip()
        if first_name or last_name:
            vcard_lines.append(f"FN:{first_name} {last_name}".strip())
            vcard_lines.append(f"N:{last_name};{first_name};;;")
        
        # –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è —Ç–∞ –ø–æ—Å–∞–¥–∞
        organization = data.get('organization', '').strip()
        if organization:
            vcard_lines.append(f"ORG:{organization}")
        
        title = data.get('title', '').strip()
        if title:
            vcard_lines.append(f"TITLE:{title}")
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–∏
        phone = data.get('phone', '').strip()
        if phone:
            vcard_lines.append(f"TEL:{phone}")
        
        email = data.get('email', '').strip()
        if email:
            vcard_lines.append(f"EMAIL:{email}")
        
        website = data.get('website', '').strip()
        if website:
            if not website.startswith(('http://', 'https://')):
                website = 'https://' + website
            vcard_lines.append(f"URL:{website}")
        
        vcard_lines.append("END:VCARD")
        return "\n".join(vcard_lines)
    
    def get_input_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""
        data = {}
        
        for key, widget in self.input_widgets.items():
            if isinstance(widget, (tk.Entry, ttk.Combobox)):
                data[key] = widget.get()
            elif isinstance(widget, scrolledtext.ScrolledText):
                data[key] = widget.get(1.0, tk.END).strip()
            elif isinstance(widget, tk.BooleanVar):
                data[key] = widget.get()
        
        return data
    
    def generate_qr(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π
            input_data = self.get_input_data()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            is_valid, result = self.qr_types[self.current_qr_type]["validator"](input_data)
            if not is_valid:
                messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó", result)
                return
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è QR-–∫–æ–¥–∞
            qr_text = self.qr_types[self.current_qr_type]["generator"](input_data)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞
            error_levels = {
                'L': qrcode.constants.ERROR_CORRECT_L,
                'M': qrcode.constants.ERROR_CORRECT_M,
                'Q': qrcode.constants.ERROR_CORRECT_Q,
                'H': qrcode.constants.ERROR_CORRECT_H
            }
            
            qr = qrcode.QRCode(
                version=1,
                error_correction=error_levels.get(self.settings['error_correction'], qrcode.constants.ERROR_CORRECT_M),
                box_size=self.settings['box_size'],
                border=self.settings['border'],
            )
            
            qr.add_data(qr_text)
            qr.make(fit=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.current_qr_image = qr.make_image(fill_color="black", back_color="white")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            styled_image = self.create_styled_qr_image(self.current_qr_image)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
            display_size = (300, 300)
            display_image = styled_image.resize(display_size, Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è tkinter
            self.qr_photo = ImageTk.PhotoImage(display_image)
            self.qr_label.configure(image=self.qr_photo, text="")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –≤ –¥–∏–∑–∞–π–Ω–µ
            self.update_preview()
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.save_btn.configure(state='normal')
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            data_length = len(qr_text.encode('utf-8'))
            type_name = self.qr_types[self.current_qr_type]["name"]
            self.status_var.set(f"QR-–∫–æ–¥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ({type_name}) | –†–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö: {data_length} –±–∞–π—Ç")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó QR-–∫–æ–¥—É: {str(e)}")
    
    def save_qr(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ QR-–∫–æ–¥–∞"""
        if not self.current_qr_image:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ QR-–∫–æ–¥")
            return
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(self.settings['save_folder'], exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —Ç–∏–ø–æ–º –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            type_name = self.current_qr_type.upper()
            export_format = self.export_format_var.get().lower()
            
            filename = f"QR_{type_name}_{timestamp}.{export_format}"
            filepath = os.path.join(self.settings['save_folder'], filename)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            final_image = self.create_styled_qr_image(self.current_qr_image)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            if self.high_quality_var.get() and export_format != 'svg':
                final_size = (800, 800)
                final_image = final_image.resize(final_size, Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            if export_format == 'svg':
                self.save_as_svg(filepath)
            elif export_format == 'png':
                final_image.save(filepath, 'PNG', optimize=True)
            elif export_format == 'jpg':
                # JPG –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                if final_image.mode == 'RGBA':
                    # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
                    jpg_image = Image.new('RGB', final_image.size, 'white')
                    jpg_image.paste(final_image, mask=final_image.split()[-1])
                    final_image = jpg_image
                final_image.save(filepath, 'JPEG', quality=95, optimize=True)
            
            self.status_var.set(f"QR-–∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"QR-–∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫:\n{filepath}")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: {str(e)}")
    
    def save_as_svg(self, filepath):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG"""
        if not SVG_AVAILABLE:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "SVG –µ–∫—Å–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å svgwrite: pip install svgwrite")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã
            input_data = self.get_input_data()
            qr_text = self.qr_types[self.current_qr_type]["generator"](input_data)
            
            error_levels = {
                'L': qrcode.constants.ERROR_CORRECT_L,
                'M': qrcode.constants.ERROR_CORRECT_M,
                'Q': qrcode.constants.ERROR_CORRECT_Q,
                'H': qrcode.constants.ERROR_CORRECT_H
            }
            
            qr = qrcode.QRCode(
                version=1,
                error_correction=error_levels.get(self.settings['error_correction'], qrcode.constants.ERROR_CORRECT_M),
                box_size=1,  # –î–ª—è SVG –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä 1
                border=self.settings['border'],
            )
            
            qr.add_data(qr_text)
            qr.make(fit=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
            matrix = qr.get_matrix()
            
            # –°–æ–∑–¥–∞–µ–º SVG
            module_size = 10  # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è –≤ SVG
            border_size = self.settings['border'] * module_size
            svg_size = len(matrix) * module_size + 2 * border_size
            
            dwg = svgwrite.Drawing(filepath, size=(svg_size, svg_size))
            
            # –§–æ–Ω
            if not self.transparent_var.get():
                dwg.add(dwg.rect(insert=(0, 0), size=(svg_size, svg_size), 
                               fill=self.bg_color_var.get()))
            
            # –ú–æ–¥—É–ª–∏ QR-–∫–æ–¥–∞
            fg_color = self.fg_color_var.get()
            
            for row in range(len(matrix)):
                for col in range(len(matrix[row])):
                    if matrix[row][col]:
                        x = col * module_size + border_size
                        y = row * module_size + border_size
                        
                        if self.module_style_var.get() == "circle":
                            # –ö—Ä—É–≥–ª—ã–µ –º–æ–¥—É–ª–∏
                            dwg.add(dwg.circle(center=(x + module_size/2, y + module_size/2), 
                                             r=module_size/2, fill=fg_color))
                        elif self.module_style_var.get() == "rounded":
                            # –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
                            dwg.add(dwg.rect(insert=(x, y), size=(module_size, module_size), 
                                           fill=fg_color, rx=module_size/4, ry=module_size/4))
                        else:
                            # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
                            dwg.add(dwg.rect(insert=(x, y), size=(module_size, module_size), 
                                           fill=fg_color))
            
            dwg.save()
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è SVG: {str(e)}")
    
    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        settings_window.geometry("600x500")
        settings_window.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        settings_window.transient(self.root)
        settings_window.grab_set()
        
        main_frame = ttk.Frame(settings_window, padding="15")
        main_frame.pack(fill='both', expand=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill='both', expand=True, pady=(0, 15))
        
        # –í–∫–ª–∞–¥–∫–∞ "–û–±—â–∏–µ"
        general_frame = ttk.Frame(notebook, padding="10")
        notebook.add(general_frame, text="–ó–∞–≥–∞–ª—å–Ω—ñ")
        
        # –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        ttk.Label(general_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è QR-–∫–æ–¥—ñ–≤:").pack(anchor='w', pady=(0, 5))
        
        folder_frame = ttk.Frame(general_frame)
        folder_frame.pack(fill='x', pady=(0, 15))
        
        self.folder_var = tk.StringVar(value=self.settings['save_folder'])
        folder_entry = ttk.Entry(folder_frame, textvariable=self.folder_var, width=50)
        folder_entry.pack(side='left', fill='x', expand=True, padx=(0, 10))
        
        ttk.Button(folder_frame, text="–û–≥–ª—è–¥...", command=self.browse_folder).pack(side='right')
        
        # –¢–∏–ø QR-–∫–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ttk.Label(general_frame, text="–¢–∏–ø QR-–∫–æ–¥—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:").pack(anchor='w', pady=(0, 5))
        
        self.default_type_var = tk.StringVar(value=self.current_qr_type)
        default_type_combo = ttk.Combobox(general_frame, textvariable=self.default_type_var, state="readonly")
        default_type_combo['values'] = list(self.qr_types.keys())
        default_type_combo.pack(fill='x', pady=(0, 15))
        
        # –í–∫–ª–∞–¥–∫–∞ "QR-–∫–æ–¥"
        qr_frame = ttk.Frame(notebook, padding="10")
        notebook.add(qr_frame, text="QR-–∫–æ–¥")
        
        # –£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫
        ttk.Label(qr_frame, text="–†—ñ–≤–µ–Ω—å –∫–æ—Ä–µ–∫—Ü—ñ—ó –ø–æ–º–∏–ª–æ–∫:").pack(anchor='w', pady=(0, 5))
        
        self.error_var = tk.StringVar(value=self.settings['error_correction'])
        error_frame = ttk.Frame(qr_frame)
        error_frame.pack(fill='x', pady=(0, 15))
        
        error_levels = [
            ('L (~7%) - –ù–∏–∑—å–∫–∏–π', 'L'),
            ('M (~15%) - –°–µ—Ä–µ–¥–Ω—ñ–π', 'M'),
            ('Q (~25%) - –í–∏—Å–æ–∫–∏–π', 'Q'),
            ('H (~30%) - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π', 'H')
        ]
        
        for i, (text, value) in enumerate(error_levels):
            ttk.Radiobutton(error_frame, text=text, variable=self.error_var, 
                           value=value).grid(row=i//2, column=i%2, sticky='w', padx=(0, 15), pady=2)
        
        # –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞
        ttk.Label(qr_frame, text="–†–æ–∑–º—ñ—Ä –±–ª–æ–∫—É (–ø—ñ–∫—Å–µ–ª—ñ–≤):").pack(anchor='w', pady=(20, 5))
        
        self.box_size_var = tk.IntVar(value=self.settings['box_size'])
        box_size_frame = ttk.Frame(qr_frame)
        box_size_frame.pack(fill='x', pady=(0, 15))
        
        ttk.Scale(box_size_frame, from_=5, to=20, variable=self.box_size_var, 
                 orient='horizontal').pack(side='left', fill='x', expand=True, padx=(0, 10))
        ttk.Label(box_size_frame, textvariable=self.box_size_var, width=3).pack(side='right')
        
        # –ì—Ä–∞–Ω–∏—Ü–∞
        ttk.Label(qr_frame, text="–†–æ–∑–º—ñ—Ä –≥—Ä–∞–Ω–∏—Ü—ñ (–±–ª–æ–∫—ñ–≤):").pack(anchor='w', pady=(0, 5))
        
        self.border_var = tk.IntVar(value=self.settings['border'])
        border_frame = ttk.Frame(qr_frame)
        border_frame.pack(fill='x', pady=(0, 15))
        
        ttk.Scale(border_frame, from_=1, to=10, variable=self.border_var, 
                 orient='horizontal').pack(side='left', fill='x', expand=True, padx=(0, 10))
        ttk.Label(border_frame, textvariable=self.border_var, width=3).pack(side='right')
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill='x')
        
        ttk.Button(button_frame, text="–ó–±–µ—Ä–µ–≥—Ç–∏", 
                  command=lambda: self.save_settings_dialog(settings_window)).pack(side='right', padx=(10, 0))
        ttk.Button(button_frame, text="–°–∫–∞—Å—É–≤–∞—Ç–∏", 
                  command=settings_window.destroy).pack(side='right')
        ttk.Button(button_frame, text="–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º", 
                  command=lambda: self.reset_to_defaults(settings_window)).pack(side='left')
    
    def reset_to_defaults(self, window):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        result = messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                                   "–°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º?")
        if result:
            self.folder_var.set(os.path.expanduser("~/Desktop/QR_Codes"))
            self.error_var.set("M")
            self.box_size_var.set(10)
            self.border_var.set(4)
            self.default_type_var.set("text")
    
    def browse_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        folder = filedialog.askdirectory(initialdir=self.folder_var.get())
        if folder:
            self.folder_var.set(folder)
    
    def save_settings_dialog(self, window):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        self.settings['save_folder'] = self.folder_var.get()
        self.settings['error_correction'] = self.error_var.get()
        self.settings['box_size'] = self.box_size_var.get()
        self.settings['border'] = self.border_var.get()
        self.settings['last_qr_type'] = self.default_type_var.get()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∑–∞–π–Ω–∞
        self.settings['fg_color'] = self.fg_color_var.get()
        self.settings['bg_color'] = self.bg_color_var.get()
        self.settings['module_style'] = self.module_style_var.get()
        self.settings['export_format'] = self.export_format_var.get()
        self.settings['high_quality'] = self.high_quality_var.get()
        self.settings['transparent_bg'] = self.transparent_var.get()
        
        self.save_settings()
        self.status_var.set(f"–ü–∞–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {self.settings['save_folder']}")
        
        window.destroy()
        messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

def main():
    root = tk.Tk()
    app = QRCodeGenerator(root)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    def on_closing():
        app.save_settings()
        root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()