#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Email —Ç–∏–ø QR-–∫–æ–¥—É
"""

import tkinter as tk
import re
import urllib.parse
from typing import Dict, Any, Tuple
from .base import BaseQRType, register_qr_type
from ..utils.clipboard import setup_clipboard_menu, auto_paste_if_valid, is_email

class EmailQRType(BaseQRType):
    """–ö–ª–∞—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Email QR-–∫–æ–¥—ñ–≤"""
    
    def __init__(self):
        super().__init__("Email", "üìß")
    
    def create_input_fields(self, parent: tk.Widget, clipboard_manager=None) -> Dict[str, tk.Widget]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –¥–ª—è email"""
        self.input_widgets = {}
        
        # –û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        for widget in parent.winfo_children():
            widget.destroy()
        
        # Email –∞–¥—Ä–µ—Å–∞
        email_entry = self.create_label_entry_pair(
            parent,
            "Email –∞–¥—Ä–µ—Å–∞:",
            entry_width=60,
            placeholder="example@domain.com"
        )
        self.input_widgets['email'] = email_entry
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É –∑ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–æ–º email
        if clipboard_manager:
            setup_clipboard_menu(email_entry, clipboard_manager)
            auto_paste_if_valid(email_entry, clipboard_manager, is_email)
        
        # –¢–µ–º–∞ –ª–∏—Å—Ç–∞
        subject_entry = self.create_label_entry_pair(
            parent,
            "–¢–µ–º–∞ –ª–∏—Å—Ç–∞ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):",
            entry_width=60
        )
        self.input_widgets['subject'] = subject_entry
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É –¥–ª—è —Ç–µ–º–∏
        if clipboard_manager:
            setup_clipboard_menu(subject_entry, clipboard_manager)
        
        # –¢–µ–∫—Å—Ç –ª–∏—Å—Ç–∞
        body_text = self.create_label_text_pair(
            parent,
            "–¢–µ–∫—Å—Ç –ª–∏—Å—Ç–∞ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):",
            text_height=6,
            text_width=60
        )
        self.input_widgets['body'] = body_text
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É –¥–ª—è —Ç–µ–∫—Å—Ç—É
        if clipboard_manager:
            setup_clipboard_menu(body_text, clipboard_manager)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
        options_frame = tk.LabelFrame(parent, text="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó", padding="5")
        options_frame.pack(fill='x', pady=(10, 0))
        
        # CC email
        cc_entry = self.create_label_entry_pair(
            options_frame,
            "CC (–∫–æ–ø—ñ—è) - —á–µ—Ä–µ–∑ –∫–æ–º—É:",
            entry_width=60,
            placeholder="email1@domain.com, email2@domain.com"
        )
        self.input_widgets['cc'] = cc_entry
        
        # BCC email  
        bcc_entry = self.create_label_entry_pair(
            options_frame,
            "BCC (–ø—Ä–∏—Ö–æ–≤–∞–Ω–∞ –∫–æ–ø—ñ—è) - —á–µ—Ä–µ–∑ –∫–æ–º—É:",
            entry_width=60
        )
        self.input_widgets['bcc'] = bcc_entry
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        info_frame = tk.Frame(parent)
        info_frame.pack(fill='x', pady=(10, 0))
        
        info_text = ("üí° –ü—ñ–¥–∫–∞–∑–∫–∞: QR-–∫–æ–¥ –≤—ñ–¥–∫—Ä–∏—î –ø–æ—à—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –∑ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º–∏ –ø–æ–ª—è–º–∏.\n"
                    "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º–æ–∂–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–∏—Å—Ç.")
        tk.Label(info_frame, text=info_text, font=('Arial', 9), 
                fg='blue', justify='left', wraplength=500).pack(anchor='w')
        
        return self.input_widgets
    
    def validate_input(self, data: Dict[str, Any]) -> Tuple[bool, str]:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è email –¥–∞–Ω–∏—Ö"""
        email = data.get('email', '').strip()
        
        if not email:
            return False, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å email –∞–¥—Ä–µ—Å—É"
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ email
        if not self._validate_email(email):
            return False, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∏"
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è CC emails
        cc = data.get('cc', '').strip()
        if cc:
            cc_emails = [e.strip() for e in cc.split(',') if e.strip()]
            for cc_email in cc_emails:
                if not self._validate_email(cc_email):
                    return False, f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç CC email: {cc_email}"
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è BCC emails
        bcc = data.get('bcc', '').strip()
        if bcc:
            bcc_emails = [e.strip() for e in bcc.split(',') if e.strip()]
            for bcc_email in bcc_emails:
                if not self._validate_email(bcc_email):
                    return False, f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç BCC email: {bcc_email}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–º–∏
        subject = data.get('subject', '').strip()
        if len(subject) > 200:
            return False, "–¢–µ–º–∞ –ª–∏—Å—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤)"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É
        body = data.get('body', '').strip()
        if len(body) > 2000:
            return False, "–¢–µ–∫—Å—Ç –ª–∏—Å—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤)"
        
        return True, email
    
    def _validate_email(self, email: str) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è email –∞–¥—Ä–µ—Å–∏"""
        email_pattern = re.compile(
            r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        )
        return bool(email_pattern.match(email.strip()))
    
    def generate_qr_data(self, data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è mailto URL"""
        email = data.get('email', '').strip()
        subject = data.get('subject', '').strip()
        body = data.get('body', '').strip()
        cc = data.get('cc', '').strip()
        bcc = data.get('bcc', '').strip()
        
        mailto_url = f"mailto:{email}"
        params = []
        
        if subject:
            params.append(f"subject={urllib.parse.quote(subject)}")
        
        if body:
            params.append(f"body={urllib.parse.quote(body)}")
        
        if cc:
            # –û—á–∏—â—É—î–º–æ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ CC emails
            cc_emails = [e.strip() for e in cc.split(',') if e.strip()]
            if cc_emails:
                params.append(f"cc={urllib.parse.quote(','.join(cc_emails))}")
        
        if bcc:
            # –û—á–∏—â—É—î–º–æ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ BCC emails
            bcc_emails = [e.strip() for e in bcc.split(',') if e.strip()]
            if bcc_emails:
                params.append(f"bcc={urllib.parse.quote(','.join(bcc_emails))}")
        
        if params:
            mailto_url += "?" + "&".join(params)
        
        return mailto_url
    
    def get_info_text(self) -> str:
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ Email —Ç–∏–ø QR-–∫–æ–¥—É"""
        return ("Email QR-–∫–æ–¥ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –ª–∏—Å—Ç –∑ –≤–∫–∞–∑–∞–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é, —Ç–µ–º–æ—é —Ç–∞ —Ç–µ–∫—Å—Ç–æ–º "
                "–≤ –ø–æ—à—Ç–æ–≤–æ–º—É –∫–ª—ñ—î–Ω—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ü—ñ–¥—Ç—Ä–∏–º—É—î CC, BCC —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.")

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∏–ø—É
register_qr_type('email', EmailQRType)