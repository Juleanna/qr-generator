#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ QR-–∫–æ–¥—ñ–≤
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, Tuple, Optional
import tkinter as tk
from tkinter import ttk, scrolledtext

class BaseQRType(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ QR-–∫–æ–¥—ñ–≤"""
    
    def __init__(self, name: str, icon: str = "üìù"):
        self.name = name
        self.icon = icon
        self.input_widgets = {}
    
    @property
    def display_name(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–º'—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ UI"""
        return f"{self.icon} {self.name}"
    
    @abstractmethod
    def create_input_fields(self, parent: tk.Widget, clipboard_manager=None) -> Dict[str, tk.Widget]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É –¥–ª—è –¥–∞–Ω–æ–≥–æ —Ç–∏–ø—É QR-–∫–æ–¥—É
        
        Args:
            parent: –ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –≤—ñ–¥–∂–µ—Ç
            clipboard_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ –≤—ñ–¥–∂–µ—Ç–∞–º–∏ –≤–≤–æ–¥—É
        """
        pass
    
    @abstractmethod
    def validate_input(self, data: Dict[str, Any]) -> Tuple[bool, str]:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        
        Args:
            data: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –∑ –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É)
        """
        pass
    
    @abstractmethod
    def generate_qr_data(self, data: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä—è–¥–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è QR-–∫–æ–¥—É
        
        Args:
            data: –í–∞–ª—ñ–¥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
            
        Returns:
            –†—è–¥–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó QR-–∫–æ–¥—É
        """
        pass
    
    def get_info_text(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ —Ç–∏–ø QR-–∫–æ–¥—É"""
        return f"QR-–∫–æ–¥ —Ç–∏–ø—É {self.name}"
    
    def get_input_data(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É"""
        data = {}
        
        for key, widget in self.input_widgets.items():
            if isinstance(widget, (tk.Entry, ttk.Combobox)):
                data[key] = widget.get()
            elif isinstance(widget, scrolledtext.ScrolledText):
                data[key] = widget.get(1.0, tk.END).strip()
            elif isinstance(widget, tk.BooleanVar):
                data[key] = widget.get()
            elif hasattr(widget, 'get'):
                data[key] = widget.get()
        
        return data
    
    def clear_input_fields(self):
        """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É"""
        for key, widget in self.input_widgets.items():
            if isinstance(widget, (tk.Entry, ttk.Combobox)):
                widget.delete(0, tk.END)
            elif isinstance(widget, scrolledtext.ScrolledText):
                widget.delete(1.0, tk.END)
            elif isinstance(widget, tk.BooleanVar):
                widget.set(False)
    
    def create_label_entry_pair(self, parent: tk.Widget, label_text: str, 
                               entry_width: int = 60, placeholder: str = "",
                               is_password: bool = False) -> tk.Entry:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏ –ª–µ–π–±–ª-–ø–æ–ª–µ –≤–≤–æ–¥—É
        
        Args:
            parent: –ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –≤—ñ–¥–∂–µ—Ç
            label_text: –¢–µ–∫—Å—Ç –ª–µ–π–±–ª–∞
            entry_width: –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –≤–≤–æ–¥—É
            placeholder: –ü—ñ–¥–∫–∞–∑–∫–∞
            is_password: –ß–∏ —Ü–µ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—é
            
        Returns:
            –°—Ç–≤–æ—Ä–µ–Ω–∏–π Entry –≤—ñ–¥–∂–µ—Ç
        """
        ttk.Label(parent, text=label_text).pack(anchor='w', pady=(0, 5))
        
        entry = tk.Entry(parent, width=entry_width)
        if is_password:
            entry.config(show="*")
        
        entry.pack(fill='x', pady=(0, 10))
        
        if placeholder:
            entry.insert(0, placeholder)
        
        return entry
    
    def create_label_text_pair(self, parent: tk.Widget, label_text: str,
                              text_height: int = 4, text_width: int = 60) -> scrolledtext.ScrolledText:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏ –ª–µ–π–±–ª-—Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ
        
        Args:
            parent: –ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –≤—ñ–¥–∂–µ—Ç
            label_text: –¢–µ–∫—Å—Ç –ª–µ–π–±–ª–∞
            text_height: –í–∏—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
            text_width: –®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
            
        Returns:
            –°—Ç–≤–æ—Ä–µ–Ω–∏–π ScrolledText –≤—ñ–¥–∂–µ—Ç
        """
        ttk.Label(parent, text=label_text).pack(anchor='w', pady=(0, 5))
        
        text_widget = scrolledtext.ScrolledText(parent, width=text_width, height=text_height, wrap=tk.WORD)
        text_widget.pack(fill='both', expand=True, pady=(0, 10))
        
        return text_widget
    
    def create_combobox(self, parent: tk.Widget, label_text: str, 
                       values: list, default_value: str = "") -> ttk.Combobox:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–±–æ–±–æ–∫—Å—É –∑ –ª–µ–π–±–ª–æ–º
        
        Args:
            parent: –ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –≤—ñ–¥–∂–µ—Ç
            label_text: –¢–µ–∫—Å—Ç –ª–µ–π–±–ª–∞
            values: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω—å
            default_value: –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            
        Returns:
            –°—Ç–≤–æ—Ä–µ–Ω–∏–π Combobox –≤—ñ–¥–∂–µ—Ç
        """
        ttk.Label(parent, text=label_text).pack(anchor='w', pady=(0, 5))
        
        combo = ttk.Combobox(parent, values=values, state="readonly")
        if default_value:
            combo.set(default_value)
        combo.pack(fill='x', pady=(0, 10))
        
        return combo
    
    def create_checkbutton(self, parent: tk.Widget, text: str) -> Tuple[ttk.Checkbutton, tk.BooleanVar]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ–∫–±–æ–∫—Å—É
        
        Args:
            parent: –ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –≤—ñ–¥–∂–µ—Ç
            text: –¢–µ–∫—Å—Ç —á–µ–∫–±–æ–∫—Å—É
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (Checkbutton –≤—ñ–¥–∂–µ—Ç, BooleanVar)
        """
        var = tk.BooleanVar()
        checkbox = ttk.Checkbutton(parent, text=text, variable=var)
        checkbox.pack(anchor='w', pady=(0, 10))
        
        return checkbox, var

# –†–µ—î—Å—Ç—Ä –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ QR-–∫–æ–¥—ñ–≤
QR_TYPES_REGISTRY = {}

def register_qr_type(type_key: str, qr_type_class: type):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É QR-–∫–æ–¥—É"""
    QR_TYPES_REGISTRY[type_key] = qr_type_class

def get_qr_type(type_key: str) -> Optional[BaseQRType]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É —Ç–∏–ø—É QR-–∫–æ–¥—É –∑–∞ –∫–ª—é—á–µ–º"""
    if type_key in QR_TYPES_REGISTRY:
        return QR_TYPES_REGISTRY[type_key]()
    return None

def get_all_qr_types() -> Dict[str, BaseQRType]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ QR-–∫–æ–¥—ñ–≤"""
    return {key: cls() for key, cls in QR_TYPES_REGISTRY.items()}