#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π —Ç–∏–ø QR-–∫–æ–¥—É
"""

import tkinter as tk
from typing import Dict, Any, Tuple
from .base import BaseQRType, register_qr_type
from ..utils.clipboard import setup_clipboard_menu, auto_paste_if_valid, is_phone
from ..utils.validators import Validators

class PhoneQRType(BaseQRType):
    """–ö–ª–∞—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö QR-–∫–æ–¥—ñ–≤"""
    
    def __init__(self):
        super().__init__("–¢–µ–ª–µ—Ñ–æ–Ω", "üìû")
    
    def create_input_fields(self, parent: tk.Widget, clipboard_manager=None) -> Dict[str, tk.Widget]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        self.input_widgets = {}
        
        # –û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        for widget in parent.winfo_children():
            widget.destroy()
        
        # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
        phone_entry = self.create_label_entry_pair(
            parent,
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            entry_width=60,
            placeholder="+380"
        )
        self.input_widgets['phone'] = phone_entry
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É –∑ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if clipboard_manager:
            setup_clipboard_menu(phone_entry, clipboard_manager)
            auto_paste_if_valid(phone_entry, clipboard_manager, is_phone)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
        options_frame = tk.LabelFrame(parent, text="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó", padding="5")
        options_frame.pack(fill='x', pady=(10, 0))
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        format_cb, self.format_var = self.create_checkbutton(
            options_frame,
            "–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è"
        )
        self.input_widgets['show_format'] = self.format_var
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç
        self.info_frame = tk.Frame(parent)
        self.info_frame.pack(fill='x', pady=(10, 0))
        
        self.format_info = tk.Label(
            self.info_frame,
            text="",
            font=('Arial', 9),
            fg='blue',
            justify='left',
            wraplength=500
        )
        self.format_info.pack(anchor='w')
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–∏ –∑–º—ñ–Ω—ñ —á–µ–∫–±–æ–∫—Å—É
        def update_format_info():
            if self.format_var.get():
                info_text = ("üì± –§–æ—Ä–º–∞—Ç–∏ –Ω–æ–º–µ—Ä—ñ–≤:\n"
                           "‚Ä¢ –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π: +380123456789\n"
                           "‚Ä¢ –ó –¥–µ—Ñ—ñ—Å–∞–º–∏: +380-12-345-67-89\n"
                           "‚Ä¢ –ó –¥—É–∂–∫–∞–º–∏: +380 (12) 345-67-89\n"
                           "‚Ä¢ –ó –ø—Ä–æ–±—ñ–ª–∞–º–∏: +380 12 345 67 89")
                self.format_info.config(text=info_text)
            else:
                self.format_info.config(text="üí° –ü—ñ–¥–∫–∞–∑–∫–∞: QR-–∫–æ–¥ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –æ–¥–Ω–∏–º –¥–æ—Ç–∏–∫–æ–º")
        
        format_cb.config(command=update_format_info)
        update_format_info()  # –ü–æ—á–∞—Ç–∫–æ–≤–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        
        # –ü—Ä–∏–∫–ª–∞–¥–∏ –∫—Ä–∞—ó–Ω
        examples_frame = tk.Frame(parent)
        examples_frame.pack(fill='x', pady=(10, 0))
        
        tk.Label(examples_frame, text="–ü—Ä–∏–∫–ª–∞–¥–∏:", font=('Arial', 9, 'bold')).pack(anchor='w')
        examples_text = ("üá∫üá¶ –£–∫—Ä–∞—ó–Ω–∞: +380123456789\n"
                        "üá∫üá∏ –°–®–ê: +1234567890\n"
                        "üá©üá™ –ù—ñ–º–µ—á—á–∏–Ω–∞: +4912345678\n"
                        "üáµüá± –ü–æ–ª—å—â–∞: +48123456789")
        tk.Label(examples_frame, text=examples_text, font=('Arial', 9), 
                fg='gray', justify='left').pack(anchor='w')
        
        return self.input_widgets
    
    def validate_input(self, data: Dict[str, Any]) -> Tuple[bool, str]:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        phone = data.get('phone', '').strip()
        
        return Validators.validate_phone(phone)
    
    def generate_qr_data(self, data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è tel: URL"""
        phone = data.get('phone', '').strip()
        
        # –û—á–∏—â–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ (–∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ + —Ç–∞ —Ü–∏—Ñ—Ä–∏)
        import re
        phone_clean = re.sub(r'[^\d+]', '', phone)
        
        return f"tel:{phone_clean}"
    
    def get_info_text(self) -> str:
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π —Ç–∏–ø QR-–∫–æ–¥—É"""
        return ("–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π QR-–∫–æ–¥ –¥–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –Ω–æ–º–µ—Ä "
                "–æ–¥–Ω–∏–º –¥–æ—Ç–∏–∫–æ–º. –ü—ñ–¥—Ç—Ä–∏–º—É—î –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ –∫–æ–¥–æ–º –∫—Ä–∞—ó–Ω–∏.")

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∏–ø—É
register_qr_type('phone', PhoneQRType)