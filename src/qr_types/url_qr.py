#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
URL —Ç–∏–ø QR-–∫–æ–¥—É
"""

import tkinter as tk
from typing import Dict, Any, Tuple
from urllib.parse import urlparse
from .base import BaseQRType, register_qr_type
from ..utils.clipboard import setup_clipboard_menu, auto_paste_if_valid, is_url

class URLQRType(BaseQRType):
    """–ö–ª–∞—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è URL QR-–∫–æ–¥—ñ–≤"""
    
    def __init__(self):
        super().__init__("–í–µ–±-—Å–∞–π—Ç (URL)", "üåê")
    
    def create_input_fields(self, parent: tk.Widget, clipboard_manager=None) -> Dict[str, tk.Widget]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è URL"""
        self.input_widgets = {}
        
        # –û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        for widget in parent.winfo_children():
            widget.destroy()
        
        # –ü–æ–ª–µ –¥–ª—è URL
        url_entry = self.create_label_entry_pair(
            parent,
            "URL –≤–µ–±-—Å–∞–π—Ç—É:",
            entry_width=60,
            placeholder="https://"
        )
        
        self.input_widgets['url'] = url_entry
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É –∑ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–æ–º URL
        if clipboard_manager:
            setup_clipboard_menu(url_entry, clipboard_manager)
            auto_paste_if_valid(url_entry, clipboard_manager, is_url)
        
        # –ü—Ä–∏–∫–ª–∞–¥–∏
        examples_frame = tk.Frame(parent)
        examples_frame.pack(fill='x', pady=(5, 10))
        
        tk.Label(examples_frame, text="–ü—Ä–∏–∫–ª–∞–¥–∏:", font=('Arial', 9, 'bold')).pack(anchor='w')
        examples_text = ("‚Ä¢ https://www.google.com\n"
                        "‚Ä¢ https://github.com/username/repo\n" 
                        "‚Ä¢ ftp://files.example.com")
        tk.Label(examples_frame, text=examples_text, font=('Arial', 9), 
                fg='gray', justify='left').pack(anchor='w')
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
        options_frame = tk.LabelFrame(parent, text="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏", padding="5")
        options_frame.pack(fill='x', pady=(0, 10))
        
        # –ö–æ—Ä–æ—Ç–∫–∏–π URL
        shorten_cb, self.shorten_var = self.create_checkbutton(
            options_frame, 
            "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –¥–æ–≤–≥–∏—Ö URL (>100 —Å–∏–º–≤–æ–ª—ñ–≤)"
        )
        self.input_widgets['warn_long'] = self.shorten_var
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
        check_cb, self.check_var = self.create_checkbutton(
            options_frame,
            "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å URL (–ø–æ—Ç—Ä–µ–±—É—î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç)"
        )
        self.input_widgets['check_availability'] = self.check_var
        
        return self.input_widgets
    
    def validate_input(self, data: Dict[str, Any]) -> Tuple[bool, str]:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è URL"""
        url = data.get('url', '').strip()
        
        if not url:
            return False, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å URL"
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ—Ç–æ–∫–æ–ª—É
        if not url.startswith(('http://', 'https://', 'ftp://', 'ftps://')):
            url = 'https://' + url
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ
            if 'url' in self.input_widgets:
                self.input_widgets['url'].delete(0, tk.END)
                self.input_widgets['url'].insert(0, url)
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è URL
        try:
            result = urlparse(url)
            if not all([result.scheme, result.netloc]):
                return False, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ URL –º—ñ—Å—Ç–∏—Ç—å –¥–æ–º–µ–Ω."
        except Exception:
            return False, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
        if data.get('warn_long', False) and len(url) > 100:
            return False, f"URL –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π ({len(url)} —Å–∏–º–≤–æ–ª—ñ–≤). –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫—ñ URL."
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        if data.get('check_availability', False):
            if not self._check_url_availability(url):
                return False, f"URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –∞–¥—Ä–µ—Å–∏."
        
        return True, url
    
    def _check_url_availability(self, url: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ URL"""
        try:
            import urllib.request
            import urllib.error
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
            req = urllib.request.Request(url)
            req.add_header('User-Agent', 'QR-Generator/2.0')
            
            with urllib.request.urlopen(req, timeout=5) as response:
                return response.getcode() == 200
        except (urllib.error.URLError, urllib.error.HTTPError, Exception):
            return False
    
    def generate_qr_data(self, data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è QR-–∫–æ–¥—É"""
        return data.get('url', '').strip()
    
    def get_info_text(self) -> str:
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ URL —Ç–∏–ø QR-–∫–æ–¥—É"""
        return ("URL QR-–∫–æ–¥ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –≤–µ–±-—Å–∞–π—Ç –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ. "
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î—Ç—å—Å—è https:// —è–∫—â–æ –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –≤–∫–∞–∑–∞–Ω–æ. "
                "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∏: http, https, ftp, ftps.")

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∏–ø—É
register_qr_type('url', URLQRType)