#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ QR Code Generator
"""

import tkinter as tk
from tkinter import ttk, messagebox
import qrcode
from PIL import Image, ImageTk
import os
from datetime import datetime

# –Ü–º–ø–æ—Ä—Ç–∏ –º–æ–¥—É–ª—ñ–≤
from ..config.settings import app_settings
from ..utils.clipboard import ClipboardManager
from ..qr_types.base import get_all_qr_types, get_qr_type
from ..design.export import QRExporter
from .design_tab import DesignTab
from .settings_dialog import SettingsDialog

# –Ü–º–ø–æ—Ä—Ç –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ QR-–∫–æ–¥—ñ–≤ –¥–ª—è —ó—Ö —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
from ..qr_types import text_qr, url_qr, email_qr

class QRCodeGenerator:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É QR Code Generator"""
    
    def __init__(self, root: tk.Tk):
        self.root = root
        self.setup_window()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        self.clipboard_manager = ClipboardManager(root)
        self.qr_exporter = QRExporter()
        
        # QR –∫–æ–¥ –∑–º—ñ–Ω–Ω—ñ
        self.current_qr_image = None
        self.qr_photo = None
        self.current_qr_type = app_settings.get("last_qr_type", "text")
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ QR-–∫–æ–¥—ñ–≤
        self.qr_types = get_all_qr_types()
        self.current_qr_instance = None
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.create_widgets()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–ø—É
        self.set_qr_type(self.current_qr_type)
    
    def setup_window(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞"""
        self.root.title("QR Code Generator Pro v2.0")
        
        # –†–æ–∑–º—ñ—Ä –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–±–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        geometry = app_settings.get("window_geometry", "1200x900")
        self.root.geometry(geometry)
        self.root.minsize(800, 600)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
        def save_geometry(event=None):
            app_settings.set("window_geometry", self.root.geometry())
        
        self.root.bind('<Configure>', save_geometry)
        
        # –Ü–∫–æ–Ω–∫–∞ (—è–∫—â–æ —î)
        try:
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–∫–æ–Ω–∫—É
            pass
        except:
            pass
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ Notebook
        self.main_notebook = ttk.Notebook(self.root, padding="5")
        self.main_notebook.pack(fill='both', expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è QR-–∫–æ–¥—É
        self.create_tab_frame = ttk.Frame(self.main_notebook, padding="10")
        self.main_notebook.add(self.create_tab_frame, text="–°—Ç–≤–æ—Ä–µ–Ω–Ω—è QR-–∫–æ–¥—É")
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–∏–∑–∞–π–Ω—É
        self.design_tab = DesignTab(self.main_notebook, self)
        self.main_notebook.add(self.design_tab.frame, text="–î–∏–∑–∞–π–Ω")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
        self.create_main_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar()
    
    def create_main_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏"""
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
        self.create_tab_frame.columnconfigure(1, weight=1)
        self.create_tab_frame.rowconfigure(4, weight=1)
        
        # –í–∏–±—ñ—Ä —Ç–∏–ø—É QR-–∫–æ–¥—É
        self.create_type_selector()
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É
        self.create_input_container()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        self.create_control_buttons()
        
        # –û–±–ª–∞—Å—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è QR-–∫–æ–¥—É
        self.create_qr_display()
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å
        self.create_info_panel()
    
    def create_type_selector(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ç–∏–ø—É QR-–∫–æ–¥—É"""
        # –õ–µ–π–±–ª
        ttk.Label(self.create_tab_frame, text="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø QR-–∫–æ–¥—É:").grid(
            row=0, column=0, columnspan=2, sticky=tk.W, pady=(0, 5)
        )
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å—É
        type_frame = ttk.Frame(self.create_tab_frame)
        type_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        type_frame.columnconfigure(0, weight=1)
        
        # –ö–æ–º–±–æ–±–æ–∫—Å —Ç–∏–ø—ñ–≤
        self.qr_type_var = tk.StringVar()
        self.type_combo = ttk.Combobox(
            type_frame, 
            textvariable=self.qr_type_var, 
            state="readonly", 
            width=40
        )
        
        # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
        type_names = [qr_type.display_name for qr_type in self.qr_types.values()]
        self.type_combo['values'] = type_names
        self.type_combo.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —à–≤–∏–¥–∫–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è
        ttk.Button(type_frame, text="–û—á–∏—Å—Ç–∏—Ç–∏", command=self.clear_fields).grid(
            row=0, column=1, sticky=tk.E
        )
        
        # –ü—Ä–∏–≤'—è–∑–∫–∞ –∑–º—ñ–Ω–∏ —Ç–∏–ø—É
        self.type_combo.bind('<<ComboboxSelected>>', self.on_type_change)
    
    def create_input_container(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É"""
        self.input_container = ttk.LabelFrame(
            self.create_tab_frame, 
            text="–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ:", 
            padding="10"
        )
        self.input_container.grid(
            row=2, column=0, columnspan=2, 
            sticky=(tk.W, tk.E, tk.N, tk.S), 
            pady=(0, 10)
        )
        self.input_container.columnconfigure(0, weight=1)
        self.input_container.rowconfigure(0, weight=1)
    
    def create_control_buttons(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
        buttons_frame = ttk.Frame(self.create_tab_frame)
        buttons_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫
        for i in range(4):
            buttons_frame.columnconfigure(i, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        self.generate_btn = ttk.Button(
            buttons_frame, 
            text="üéØ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥", 
            command=self.generate_qr
        )
        self.generate_btn.grid(row=0, column=0, padx=(0, 5), sticky=(tk.W, tk.E))
        
        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        self.save_btn = ttk.Button(
            buttons_frame, 
            text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ QR-–∫–æ–¥", 
            command=self.save_qr, 
            state='disabled'
        )
        self.save_btn.grid(row=0, column=1, padx=5, sticky=(tk.W, tk.E))
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
        self.copy_btn = ttk.Button(
            buttons_frame,
            text="üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏",
            command=self.copy_qr_to_clipboard,
            state='disabled'
        )
        self.copy_btn.grid(row=0, column=2, padx=5, sticky=(tk.W, tk.E))
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.settings_btn = ttk.Button(
            buttons_frame, 
            text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", 
            command=self.open_settings
        )
        self.settings_btn.grid(row=0, column=3, padx=(5, 0), sticky=(tk.W, tk.E))
    
    def create_qr_display(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∞—Å—Ç—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è QR-–∫–æ–¥—É"""
        qr_frame = ttk.LabelFrame(
            self.create_tab_frame, 
            text="–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π QR-–∫–æ–¥", 
            padding="10"
        )
        qr_frame.grid(
            row=4, column=0, columnspan=2, 
            sticky=(tk.W, tk.E, tk.N, tk.S), 
            pady=(0, 10)
        )
        
        self.qr_label = ttk.Label(
            qr_frame, 
            text="QR-–∫–æ–¥ –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó",
            relief='sunken', 
            anchor='center'
        )
        self.qr_label.pack(expand=True, fill='both')
        
        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
        qr_frame.configure(height=300)
    
    def create_info_panel(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ"""
        self.info_frame = ttk.LabelFrame(
            self.create_tab_frame, 
            text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", 
            padding="5"
        )
        self.info_frame.grid(
            row=5, column=0, columnspan=2, 
            sticky=(tk.W, tk.E), 
            pady=(0, 10)
        )
        
        self.info_label = ttk.Label(
            self.info_frame, 
            text="", 
            wraplength=600, 
            justify='left'
        )
        self.info_label.pack(fill='x')
    
    def create_status_bar(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å –±–∞—Ä—É"""
        self.status_var = tk.StringVar()
        self.status_var.set(f"–ü–∞–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {app_settings.get('save_folder')}")
        
        status_bar = ttk.Label(
            self.root, 
            textvariable=self.status_var, 
            relief='sunken'
        )
        status_bar.pack(side='bottom', fill='x')
    
    def set_qr_type(self, type_key: str):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–ø—É QR-–∫–æ–¥—É"""
        if type_key in self.qr_types:
            self.current_qr_type = type_key
            self.current_qr_instance = get_qr_type(type_key)
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–æ–º–±–æ–±–æ–∫—Å—ñ
            display_name = self.qr_types[type_key].display_name
            self.qr_type_var.set(display_name)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É
            self.create_input_fields()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            self.update_info_text()
    
    def on_type_change(self, event=None):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ç–∏–ø—É QR-–∫–æ–¥—É"""
        selected_name = self.qr_type_var.get()
        
        # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–ª—é—á–∞ –∑–∞ –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–∏–º —ñ–º'—è–º
        for key, qr_type in self.qr_types.items():
            if qr_type.display_name == selected_name:
                self.set_qr_type(key)
                break
        
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ QR-–∫–æ–¥—É
        self.clear_qr_display()
    
    def create_input_fields(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–ø—É"""
        if self.current_qr_instance:
            self.current_qr_instance.create_input_fields(
                self.input_container, 
                self.clipboard_manager
            )
    
    def clear_fields(self):
        """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É"""
        if self.current_qr_instance:
            self.current_qr_instance.clear_input_fields()
    
    def clear_qr_display(self):
        """–û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è QR-–∫–æ–¥—É"""
        self.current_qr_image = None
        self.qr_photo = None
        self.qr_label.configure(image='', text="QR-–∫–æ–¥ –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
        self.save_btn.configure(state='disabled')
        self.copy_btn.configure(state='disabled')
        
        # –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –≤ –¥–∏–∑–∞–π–Ω—ñ
        self.design_tab.clear_preview()
    
    def update_info_text(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
        if self.current_qr_instance:
            info_text = self.current_qr_instance.get_info_text()
            self.info_label.config(text=info_text)
    
    def generate_qr(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR-–∫–æ–¥—É"""
        if not self.current_qr_instance:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–¢–∏–ø QR-–∫–æ–¥—É –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
            return
        
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ø–æ–ª—ñ–≤
            input_data = self.current_qr_instance.get_input_data()
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            is_valid, result = self.current_qr_instance.validate_input(input_data)
            if not is_valid:
                messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó", result)
                return
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É –¥–ª—è QR-–∫–æ–¥—É
            qr_text = self.current_qr_instance.generate_qr_data(input_data)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è QR-–∫–æ–¥—É
            error_levels = {
                'L': qrcode.constants.ERROR_CORRECT_L,
                'M': qrcode.constants.ERROR_CORRECT_M,
                'Q': qrcode.constants.ERROR_CORRECT_Q,
                'H': qrcode.constants.ERROR_CORRECT_H
            }
            
            qr = qrcode.QRCode(
                version=1,
                error_correction=error_levels.get(
                    app_settings.get('error_correction', 'M'), 
                    qrcode.constants.ERROR_CORRECT_M
                ),
                box_size=app_settings.get('box_size', 10),
                border=app_settings.get('border', 4),
            )
            
            qr.add_data(qr_text)
            qr.make(fit=True)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            self.current_qr_image = qr.make_image(fill_color="black", back_color="white")
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è QR-–∫–æ–¥—É
            self.display_qr_image()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –≤ –¥–∏–∑–∞–π–Ω—ñ
            self.design_tab.update_preview(self.current_qr_image)
            
            # –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫
            self.save_btn.configure(state='normal')
            self.copy_btn.configure(state='normal')
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
            data_length = len(qr_text.encode('utf-8'))
            type_name = self.current_qr_instance.name
            self.status_var.set(
                f"QR-–∫–æ–¥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ({type_name}) | –†–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö: {data_length} –±–∞–π—Ç"
            )
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó QR-–∫–æ–¥—É:\n{str(e)}")
    
    def display_qr_image(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è QR-–∫–æ–¥—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤—ñ–∫–Ω—ñ"""
        if not self.current_qr_image:
            return
        
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            styled_image = self.design_tab.create_styled_qr_image(self.current_qr_image)
            
            # –ó–º—ñ–Ω–∞ —Ä–æ–∑–º—ñ—Ä—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            display_size = (300, 300)
            display_image = styled_image.resize(display_size, Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –¥–ª—è tkinter
            self.qr_photo = ImageTk.PhotoImage(display_image)
            self.qr_label.configure(image=self.qr_photo, text="")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è QR-–∫–æ–¥—É: {e}")
    
    def save_qr(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è QR-–∫–æ–¥—É"""
        if not self.current_qr_image:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ QR-–∫–æ–¥")
            return
        
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            save_folder = app_settings.get('save_folder')
            os.makedirs(save_folder, exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            type_name = self.current_qr_type.upper()
            export_format = self.design_tab.get_export_format()
            
            filename = f"QR_{type_name}_{timestamp}.{export_format.lower()}"
            filepath = os.path.join(save_folder, filename)
            
            # –ï–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –¥–∏–∑–∞–π–Ω –º–æ–¥—É–ª—å
            success = self.qr_exporter.export_qr(
                self.current_qr_image,
                filepath,
                self.design_tab.get_export_settings()
            )
            
            if success:
                self.status_var.set(f"QR-–∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"QR-–∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫:\n{filepath}")
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ QR-–∫–æ–¥")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ:\n{str(e)}")
    
    def copy_qr_to_clipboard(self):
        """–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è QR-–∫–æ–¥—É –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É"""
        if not self.current_qr_image:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ QR-–∫–æ–¥")
            return
        
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            styled_image = self.design_tab.create_styled_qr_image(self.current_qr_image)
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É
            import tempfile
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
                styled_image.save(tmp_file.name, 'PNG')
                
                # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É (Windows)
                try:
                    import win32clipboard
                    from PIL import Image
                    
                    win32clipboard.OpenClipboard()
                    win32clipboard.EmptyClipboard()
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ —Ñ–æ—Ä–º–∞—Ç –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É
                    output = io.BytesIO()
                    styled_image.convert('RGB').save(output, 'BMP')
                    data = output.getvalue()[14:]  # –í–∏–¥–∞–ª—è—î–º–æ BMP –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    
                    win32clipboard.SetClipboardData(win32clipboard.CF_DIB, data)
                    win32clipboard.CloseClipboard()
                    
                    self.status_var.set("QR-–∫–æ–¥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É")
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", "QR-–∫–æ–¥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É")
                    
                except ImportError:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –±–µ–∑ win32clipboard
                    self.clipboard_manager.set_text(f"QR –∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É: {tmp_file.name}")
                    messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", 
                                      f"QR-–∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª:\n{tmp_file.name}")
                
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä:\n{str(e)}")
    
    def open_settings(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        dialog = SettingsDialog(self.root, app_settings)
        if dialog.result:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            self.status_var.set(f"–ü–∞–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {app_settings.get('save_folder')}")
            
            # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è QR-–∫–æ–¥—É —è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∏—Å—å –±–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            if self.current_qr_image:
                self.generate_qr()
    
    def save_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ"""
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–ø—É QR-–∫–æ–¥—É
        app_settings.set("last_qr_type", self.current_qr_type)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–∏–∑–∞–π–Ω—É
        design_settings = self.design_tab.get_current_settings()
        app_settings.update(design_settings)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª
        app_settings.save_settings()
    
    def on_closing(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–æ–¥–∞—Ç–∫—É"""
        self.save_settings()
        self.root.destroy()

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ io –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±—É—Ñ–µ—Ä–æ–º –æ–±–º—ñ–Ω—É
import io