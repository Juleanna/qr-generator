#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∫–ª–∞–¥–∫–∞ –¥–∏–∑–∞–π–Ω—É QR-–∫–æ–¥—É
"""

import tkinter as tk
from tkinter import ttk, colorchooser
from PIL import Image, ImageTk
from typing import Dict, Any, Optional

from ..config.settings import app_settings

class DesignTab:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–æ—é –¥–∏–∑–∞–π–Ω—É"""
    
    def __init__(self, parent: ttk.Notebook, main_window):
        self.parent = parent
        self.main_window = main_window
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—Ä–µ–π–º—É
        self.frame = ttk.Frame(parent, padding="10")
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∫–æ–ª—å–æ—Ä–∏
        self.color_presets = {
            "–ö–ª–∞—Å–∏—á–Ω–∏–π": {"fg": "#000000", "bg": "#FFFFFF"},
            "–°–∏–Ω—ñ–π": {"fg": "#1E3A8A", "bg": "#FFFFFF"},
            "–ó–µ–ª–µ–Ω–∏–π": {"fg": "#166534", "bg": "#FFFFFF"},
            "–ß–µ—Ä–≤–æ–Ω–∏–π": {"fg": "#991B1B", "bg": "#FFFFFF"},
            "–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π": {"fg": "#7C3AED", "bg": "#FFFFFF"},
            "–¢–µ–º–Ω–∞ —Ç–µ–º–∞": {"fg": "#FFFFFF", "bg": "#1F2937"},
            "–ì—Ä–∞–¥–∞—Ü—ñ—è —Å–∏–Ω—å–æ–≥–æ": {"fg": "#1E40AF", "bg": "#DBEAFE"},
            "–ó–µ–ª–µ–Ω–∞ –≥—Ä–∞–¥–∞—Ü—ñ—è": {"fg": "#059669", "bg": "#D1FAE5"}
        }
        
        # –°—Ç–∏–ª—ñ –º–æ–¥—É–ª—ñ–≤
        self.module_styles = {
            "square": "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ñ",
            "circle": "–ö—Ä—É–≥–ª—ñ",
            "rounded": "–ó–∞–∫—Ä—É–≥–ª–µ–Ω—ñ"
        }
        
        # –ü–æ—Ç–æ—á–Ω–∏–π QR –∫–æ–¥ –¥–ª—è –ø—Ä–µ–≤—å—é
        self.current_qr_image = None
        self.preview_qr = None
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è UI
        self.create_widgets()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.load_settings()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≤–∫–ª–∞–¥–∫–∏ –¥–∏–∑–∞–π–Ω—É"""
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
        self.frame.columnconfigure(1, weight=1)
        self.frame.rowconfigure(0, weight=1)
        
        # –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.create_settings_panel()
        
        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - –ø—Ä–µ–≤—å—é
        self.create_preview_panel()
    
    def create_settings_panel(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        left_frame = ttk.Frame(self.frame)
        left_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        # –°–µ–∫—Ü—ñ—è –∫–æ–ª—å–æ—Ä—ñ–≤
        self.create_colors_section(left_frame)
        
        # –°–µ–∫—Ü—ñ—è —Å—Ç–∏–ª—ñ–≤
        self.create_styles_section(left_frame)
        
        # –°–µ–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É
        self.create_export_section(left_frame)
        
        # –ö–Ω–æ–ø–∫–∏
        self.create_design_buttons(left_frame)
    
    def create_colors_section(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤"""
        colors_frame = ttk.LabelFrame(parent, text="–ö–æ–ª—å–æ—Ä–∏", padding="10")
        colors_frame.pack(fill='x', pady=(0, 10))
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ —Å—Ö–µ–º–∏
        ttk.Label(colors_frame, text="–ì–æ—Ç–æ–≤—ñ —Å—Ö–µ–º–∏:").pack(anchor='w', pady=(0, 5))
        
        self.color_preset_var = tk.StringVar(value="–ö–ª–∞—Å–∏—á–Ω–∏–π")
        preset_combo = ttk.Combobox(
            colors_frame,
            textvariable=self.color_preset_var,
            values=list(self.color_presets.keys()),
            state="readonly"
        )
        preset_combo.pack(fill='x', pady=(0, 10))
        preset_combo.bind('<<ComboboxSelected>>', self.on_preset_change)
        
        # –ö–æ–ª—ñ—Ä –ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–ª–∞–Ω—É
        fg_frame = ttk.Frame(colors_frame)
        fg_frame.pack(fill='x', pady=(0, 5))
        
        ttk.Label(fg_frame, text="–ö–æ–ª—ñ—Ä QR-–∫–æ–¥—É:").pack(side='left')
        self.fg_color_var = tk.StringVar(value="#000000")
        self.fg_color_btn = tk.Button(
            fg_frame,
            text="   ",
            bg=self.fg_color_var.get(),
            width=3,
            command=self.choose_fg_color
        )
        self.fg_color_btn.pack(side='right')
        
        # –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É
        bg_frame = ttk.Frame(colors_frame)
        bg_frame.pack(fill='x', pady=(0, 5))
        
        ttk.Label(bg_frame, text="–ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É:").pack(side='left')
        self.bg_color_var = tk.StringVar(value="#FFFFFF")
        self.bg_color_btn = tk.Button(
            bg_frame,
            text="   ",
            bg=self.bg_color_var.get(),
            width=3,
            command=self.choose_bg_color
        )
        self.bg_color_btn.pack(side='right')
        
        # –ü—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω
        self.transparent_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(
            colors_frame,
            text="–ü—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω (PNG)",
            variable=self.transparent_var,
            command=self.update_preview
        ).pack(anchor='w')
    
    def create_styles_section(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó —Å—Ç–∏–ª—ñ–≤"""
        style_frame = ttk.LabelFrame(parent, text="–°—Ç–∏–ª—å –º–æ–¥—É–ª—ñ–≤", padding="10")
        style_frame.pack(fill='x', pady=(0, 10))
        
        self.module_style_var = tk.StringVar(value="square")
        
        for style_key, style_name in self.module_styles.items():
            ttk.Radiobutton(
                style_frame,
                text=style_name,
                variable=self.module_style_var,
                value=style_key,
                command=self.update_preview
            ).pack(anchor='w')
    
    def create_export_section(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –µ–∫—Å–ø–æ—Ä—Ç—É"""
        export_frame = ttk.LabelFrame(parent, text="–§–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É", padding="10")
        export_frame.pack(fill='x', pady=(0, 10))
        
        self.export_format_var = tk.StringVar(value="PNG")
        
        # –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏
        formats = ['PNG', 'JPG', 'SVG']
        
        for fmt in formats:
            ttk.Radiobutton(
                export_frame,
                text=fmt,
                variable=self.export_format_var,
                value=fmt,
                command=self.update_export_options
            ).pack(anchor='w')
        
        # –û–ø—Ü—ñ—ó —è–∫–æ—Å—Ç—ñ
        quality_frame = ttk.Frame(export_frame)
        quality_frame.pack(fill='x', pady=(10, 0))
        
        self.high_quality_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            quality_frame,
            text="–í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å (800x800)",
            variable=self.high_quality_var
        ).pack(anchor='w')
        
        # –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
        size_frame = ttk.Frame(export_frame)
        size_frame.pack(fill='x', pady=(5, 0))
        
        ttk.Label(size_frame, text="–†–æ–∑–º—ñ—Ä (–ø—ñ–∫—Å–µ–ª—ñ):").pack(side='left')
        self.size_var = tk.IntVar(value=400)
        size_scale = ttk.Scale(
            size_frame,
            from_=200,
            to=1200,
            variable=self.size_var,
            orient='horizontal'
        )
        size_scale.pack(side='left', fill='x', expand=True, padx=(10, 5))
        
        self.size_label = ttk.Label(size_frame, text="400")
        self.size_label.pack(side='right')
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–π–±–ª—É —Ä–æ–∑–º—ñ—Ä—É
        def update_size_label(*args):
            self.size_label.config(text=str(self.size_var.get()))
        
        self.size_var.trace('w', update_size_label)
    
    def create_design_buttons(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–∏–∑–∞–π–Ω—É"""
        buttons_frame = ttk.Frame(parent)
        buttons_frame.pack(fill='x', pady=(10, 0))
        
        ttk.Button(
            buttons_frame,
            text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ–≤—å—é",
            command=self.update_preview
        ).pack(fill='x', pady=(0, 5))
        
        ttk.Button(
            buttons_frame,
            text="‚Üª –°–∫–∏–Ω—É—Ç–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö",
            command=self.reset_design
        ).pack(fill='x')
    
    def create_preview_panel(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –ø—Ä–µ–≤—å—é"""
        right_frame = ttk.LabelFrame(self.frame, text="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥", padding="10")
        right_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–µ–≤—å—é
        self.preview_label = ttk.Label(
            right_frame,
            text="–ü—Ä–µ–≤—å—é –∑'—è–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó QR-–∫–æ–¥—É",
            relief='sunken',
            anchor='center'
        )
        self.preview_label.pack(expand=True, fill='both')
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–µ–≤—å—é
        preview_info = ttk.Frame(right_frame)
        preview_info.pack(fill='x', pady=(10, 0))
        
        self.preview_info_label = ttk.Label(preview_info, text="", justify='center')
        self.preview_info_label.pack()
    
    def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        self.fg_color_var.set(app_settings.get('fg_color', '#000000'))
        self.bg_color_var.set(app_settings.get('bg_color', '#FFFFFF'))
        self.module_style_var.set(app_settings.get('module_style', 'square'))
        self.export_format_var.set(app_settings.get('export_format', 'PNG'))
        self.high_quality_var.set(app_settings.get('high_quality', True))
        self.transparent_var.set(app_settings.get('transparent_bg', False))
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∫–æ–ª—å–æ—Ä—ñ–≤
        self.fg_color_btn.config(bg=self.fg_color_var.get())
        self.bg_color_btn.config(bg=self.bg_color_var.get())
    
    def on_preset_change(self, event=None):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó —Å—Ö–µ–º–∏"""
        preset_name = self.color_preset_var.get()
        if preset_name in self.color_presets:
            colors = self.color_presets[preset_name]
            
            self.fg_color_var.set(colors['fg'])
            self.bg_color_var.set(colors['bg'])
            
            self.fg_color_btn.config(bg=colors['fg'])
            self.bg_color_btn.config(bg=colors['bg'])
            
            self.update_preview()
    
    def choose_fg_color(self):
        """–í–∏–±—ñ—Ä –∫–æ–ª—å–æ—Ä—É –ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–ª–∞–Ω—É"""
        color = colorchooser.askcolor(initialcolor=self.fg_color_var.get())
        if color[1]:
            self.fg_color_var.set(color[1])
            self.fg_color_btn.config(bg=color[1])
            self.color_preset_var.set("–í–ª–∞—Å–Ω–∏–π")
            self.update_preview()
    
    def choose_bg_color(self):
        """–í–∏–±—ñ—Ä –∫–æ–ª—å–æ—Ä—É —Ñ–æ–Ω—É"""
        color = colorchooser.askcolor(initialcolor=self.bg_color_var.get())
        if color[1]:
            self.bg_color_var.set(color[1])
            self.bg_color_btn.config(bg=color[1])
            self.color_preset_var.set("–í–ª–∞—Å–Ω–∏–π")
            self.update_preview()
    
    def update_export_options(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–ø—Ü—ñ–π –µ–∫—Å–ø–æ—Ä—Ç—É"""
        fmt = self.export_format_var.get()
        if fmt == 'SVG':
            self.high_quality_var.set(False)  # SVG –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏—Å–æ–∫–æ—ó —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—Å—Ç—ñ
    
    def reset_design(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –¥–∏–∑–∞–π–Ω—É –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        self.fg_color_var.set("#000000")
        self.bg_color_var.set("#FFFFFF")
        self.fg_color_btn.config(bg="#000000")
        self.bg_color_btn.config(bg="#FFFFFF")
        self.module_style_var.set("square")
        self.export_format_var.set("PNG")
        self.transparent_var.set(False)
        self.high_quality_var.set(True)
        self.color_preset_var.set("–ö–ª–∞—Å–∏—á–Ω–∏–π")
        self.size_var.set(400)
        self.update_preview()
    
    def update_preview(self, qr_image: Optional[Image.Image] = None):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é QR-–∫–æ–¥—É"""
        if qr_image:
            self.current_qr_image = qr_image
        
        if not self.current_qr_image:
            return
        
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            preview_image = self.create_styled_qr_image(self.current_qr_image, preview=True)
            
            # –ó–º—ñ–Ω–∞ —Ä–æ–∑–º—ñ—Ä—É –¥–ª—è –ø—Ä–µ–≤—å—é
            display_size = (250, 250)
            preview_display = preview_image.resize(display_size, Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –¥–ª—è tkinter
            self.preview_qr = ImageTk.PhotoImage(preview_display)
            self.preview_label.configure(image=self.preview_qr, text="")
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            self.update_preview_info()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if hasattr(self.main_window, 'display_qr_image'):
                self.main_window.display_qr_image()
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é: {e}")
    
    def update_preview_info(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–µ–≤—å—é"""
        style_name = self.module_styles[self.module_style_var.get()]
        colors_info = f"–ö–æ–ª—å–æ—Ä–∏: {self.fg_color_var.get()} / {self.bg_color_var.get()}"
        format_info = f"–§–æ—Ä–º–∞—Ç: {self.export_format_var.get()}"
        size_info = f"–†–æ–∑–º—ñ—Ä: {self.size_var.get()}x{self.size_var.get()}"
        
        info_text = f"{style_name}\n{colors_info}\n{format_info}\n{size_info}"
        self.preview_info_label.config(text=info_text)
    
    def clear_preview(self):
        """–û—á–∏—â–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é"""
        self.current_qr_image = None
        self.preview_qr = None
        self.preview_label.configure(
            image='',
            text="–ü—Ä–µ–≤—å—é –∑'—è–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó QR-–∫–æ–¥—É"
        )
        self.preview_info_label.config(text="")
    
    def create_styled_qr_image(self, base_qr_image: Image.Image, preview: bool = False) -> Image.Image:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ QR-–∫–æ–¥—É"""
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤
        fg_color = self.fg_color_var.get()
        bg_color = self.bg_color_var.get() if not self.transparent_var.get() else None
        
        # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        styled_image = base_qr_image.copy()
        
        # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤
        if fg_color != "#000000" or bg_color != "#FFFFFF" or self.transparent_var.get():
            styled_image = styled_image.convert("RGBA")
            data = styled_image.getdata()
            
            new_data = []
            for item in data:
                # –ó–∞–º—ñ–Ω–∞ —á–æ—Ä–Ω–æ–≥–æ –Ω–∞ –≤–∏–±—Ä–∞–Ω–∏–π –∫–æ–ª—ñ—Ä –ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–ª–∞–Ω—É
                if item[:3] == (0, 0, 0):  # —á–æ—Ä–Ω–∏–π –ø—ñ–∫—Å–µ–ª—å
                    rgb = tuple(int(fg_color[i:i+2], 16) for i in (1, 3, 5))
                    new_data.append(rgb + (255,))
                # –ó–∞–º—ñ–Ω–∞ –±—ñ–ª–æ–≥–æ –Ω–∞ –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É –∞–±–æ –ø—Ä–æ–∑–æ—Ä–∏–π
                elif item[:3] == (255, 255, 255):  # –±—ñ–ª–∏–π –ø—ñ–∫—Å–µ–ª—å
                    if self.transparent_var.get():
                        new_data.append((255, 255, 255, 0))  # –ø—Ä–æ–∑–æ—Ä–∏–π
                    else:
                        rgb = tuple(int(bg_color[i:i+2], 16) for i in (1, 3, 5))
                        new_data.append(rgb + (255,))
                else:
                    new_data.append(item)
            
            styled_image.putdata(new_data)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–∞–∑–∞–¥ –≤ RGB —è–∫—â–æ —Ñ–æ–Ω –Ω–µ –ø—Ä–æ–∑–æ—Ä–∏–π
            if not self.transparent_var.get():
                styled_image = styled_image.convert("RGB")
        
        return styled_image
    
    def get_export_format(self) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É –µ–∫—Å–ø–æ—Ä—Ç—É"""
        return self.export_format_var.get().lower()
    
    def get_export_settings(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –µ–∫—Å–ø–æ—Ä—Ç—É"""
        return {
            'fg_color': self.fg_color_var.get(),
            'bg_color': self.bg_color_var.get(),
            'transparent_bg': self.transparent_var.get(),
            'module_style': self.module_style_var.get(),
            'format': self.export_format_var.get(),
            'high_quality': self.high_quality_var.get(),
            'size': self.size_var.get()
        }
    
    def get_current_settings(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"""
        return {
            'fg_color': self.fg_color_var.get(),
            'bg_color': self.bg_color_var.get(),
            'transparent_bg': self.transparent_var.get(),
            'module_style': self.module_style_var.get(),
            'export_format': self.export_format_var.get(),
            'high_quality': self.high_quality_var.get()
        }